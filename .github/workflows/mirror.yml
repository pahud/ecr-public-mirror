name: Mirror n8n Images to ECR Public

on:
  schedule:
    # Runs daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual triggering

# Permissions needed for GitHub OIDC + ECR login/push
permissions:
  id-token: write # Required for assuming IAM role via OIDC
  contents: read  # Default recommended permission

jobs:
  mirror-images:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Allows other matrix jobs to continue if one fails
      matrix:
        include:
          - image_name: n8nio/n8n
            tags_to_mirror: "stable beta next latest"
          - image_name: cloudflare/cloudflared
            tags_to_mirror: "latest latest-arm64 latest-amd64"
    env:
      AWS_REGION: us-east-1
      ECR_PUBLIC_REGISTRY: public.ecr.aws/pahudnet
      # ECR_REPOSITORY and DOCKERHUB_IMAGE are now defined in the matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # ARN of the IAM role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Mirror Tags
        run: |
          ECR_IMAGE_BASE="${{ env.ECR_PUBLIC_REGISTRY }}/${{ matrix.image_name }}" # Use matrix.image_name
          echo "Mirroring to ${ECR_IMAGE_BASE}"

          # Loop through the specified tags from the matrix
          for TAG in ${{ matrix.tags_to_mirror }}; do # Use matrix.tags_to_mirror
            echo "--- Processing tag: $TAG for image ${{ matrix.image_name }} ---"
            SOURCE_IMAGE="${{ matrix.image_name }}:${TAG}" # Use matrix.image_name
            TARGET_IMAGE="${ECR_IMAGE_BASE}:${TAG}"

            echo "Pulling ${SOURCE_IMAGE}"
            if ! docker pull "${SOURCE_IMAGE}"; then
              echo "ERROR: Failed to pull ${SOURCE_IMAGE}. Skipping."
              continue # Optionally skip failed pulls
            fi

            echo "Tagging ${SOURCE_IMAGE} as ${TARGET_IMAGE}"
            docker tag "${SOURCE_IMAGE}" "${TARGET_IMAGE}"

            echo "Pushing ${TARGET_IMAGE}"
            if ! docker push "${TARGET_IMAGE}"; then
               echo "ERROR: Failed to push ${TARGET_IMAGE}. Skipping."
               # Consider adding retry logic here if needed
               continue
            fi
            echo "Successfully mirrored tag: ${TAG}"
            # Optional: Clean up local image to save runner disk space
            # docker rmi "${SOURCE_IMAGE}" "${TARGET_IMAGE}" || true
          done

          echo "--- Mirroring complete for ${{ matrix.image_name }} ---"
