name: Mirror n8n Images to ECR Public

on:
  schedule:
    # Runs daily at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual triggering

# Permissions needed for GitHub OIDC + ECR login/push
permissions:
  id-token: write # Required for assuming IAM role via OIDC
  contents: read  # Default recommended permission

jobs:
  mirror-images:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Allows other matrix jobs to continue if one fails
      matrix:
        include:
          - image_name: n8nio/n8n
            tags_to_mirror: "stable beta next latest"
          - image_name: cloudflare/cloudflared
            tags_to_mirror: "latest latest-arm64 latest-amd64"
    env:
      AWS_REGION: us-east-1
      ECR_PUBLIC_REGISTRY: public.ecr.aws/pahudnet
      # ECR_REPOSITORY and DOCKERHUB_IMAGE are now defined in the matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }} # ARN of the IAM role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Mirror Tags (Multi-Platform for n8nio/n8n)
        run: |
          ECR_IMAGE_BASE="${{ env.ECR_PUBLIC_REGISTRY }}/${{ matrix.image_name }}"
          echo "Mirroring to ${ECR_IMAGE_BASE}"

          for TAG in ${{ matrix.tags_to_mirror }}; do
            echo "--- Processing tag: $TAG for image ${{ matrix.image_name }} ---"
            SOURCE_IMAGE="${{ matrix.image_name }}:${TAG}"
            TARGET_IMAGE_AMD64="${ECR_IMAGE_BASE}:${TAG}-amd64"
            TARGET_IMAGE_ARM64="${ECR_IMAGE_BASE}:${TAG}-arm64"
            TARGET_IMAGE="${ECR_IMAGE_BASE}:${TAG}"

            if [[ "${{ matrix.image_name }}" == "n8nio/n8n" ]]; then
              # Pull both platforms
              echo "Pulling ${SOURCE_IMAGE} for linux/amd64"
              docker pull --platform linux/amd64 "${SOURCE_IMAGE}"
              echo "Pulling ${SOURCE_IMAGE} for linux/arm64"
              docker pull --platform linux/arm64 "${SOURCE_IMAGE}"

              # Tag for ECR
              docker tag "${SOURCE_IMAGE}" "${TARGET_IMAGE_AMD64}"
              docker tag "${SOURCE_IMAGE}" "${TARGET_IMAGE_ARM64}"

              # Push both images
              docker push "${TARGET_IMAGE_AMD64}"
              docker push "${TARGET_IMAGE_ARM64}"

              # Create and push manifest
              docker manifest create "${TARGET_IMAGE}" \
                --amend "${TARGET_IMAGE_AMD64}" \
                --amend "${TARGET_IMAGE_ARM64}"
              docker manifest push "${TARGET_IMAGE}"

              echo "Successfully mirrored multi-platform tag: ${TAG}"
              # Optionally clean up
              # docker rmi "${SOURCE_IMAGE}" "${TARGET_IMAGE_AMD64}" "${TARGET_IMAGE_ARM64}" || true
            else
              # Default: single-platform mirror
              echo "Pulling ${SOURCE_IMAGE}"
              if ! docker pull "${SOURCE_IMAGE}"; then
                echo "ERROR: Failed to pull ${SOURCE_IMAGE}. Skipping."
                continue
              fi
              echo "Tagging ${SOURCE_IMAGE} as ${ECR_IMAGE_BASE}:${TAG}"
              docker tag "${SOURCE_IMAGE}" "${ECR_IMAGE_BASE}:${TAG}"
              echo "Pushing ${ECR_IMAGE_BASE}:${TAG}"
              if ! docker push "${ECR_IMAGE_BASE}:${TAG}"; then
                echo "ERROR: Failed to push ${ECR_IMAGE_BASE}:${TAG}. Skipping."
                continue
              fi
              echo "Successfully mirrored tag: ${TAG}"
              # docker rmi "${SOURCE_IMAGE}" "${ECR_IMAGE_BASE}:${TAG}" || true
            fi
          done

          echo "--- Mirroring complete for ${{ matrix.image_name }} ---"
